'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _async = require('async');

var _last = require('lodash/last');

var _last2 = _interopRequireDefault(_last);

var _partial = require('lodash/partial');

var _partial2 = _interopRequireDefault(_partial);

var _assign = require('lodash/assign');

var _assign2 = _interopRequireDefault(_assign);

var _transform = require('lodash/transform');

var _transform2 = _interopRequireDefault(_transform);

var _recursiveReaddir = require('recursive-readdir');

var _recursiveReaddir2 = _interopRequireDefault(_recursiveReaddir);

var _read = require('./read');

var _read2 = _interopRequireDefault(_read);

var _requiredOptions2 = require('./util/requiredOptions');

var _requiredOptions3 = _interopRequireDefault(_requiredOptions2);

var _constants = require('./util/constants');

var _urlToPath = require('./util/urlToPath');

var _urlToPath2 = _interopRequireDefault(_urlToPath);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var postDate = function postDate(post) {
  return new Date(parseInt(post.created_time, 10) * 1000);
};

exports.default = function (options, cb) {
  return (0, _read2.default)(options, function (err, data) {
    if (err) return cb(err);

    var _requiredOptions = (0, _requiredOptions3.default)(options, ['dir', 'user']),
        dir = _requiredOptions.dir,
        user = _requiredOptions.user;

    var mediaDir = (0, _partial2.default)(_path2.default.join, _path2.default.resolve(__dirname, '..'), dir, user, _constants.MEDIA_DIRNAME);

    var mediaExists = function mediaExists(url, cb) {
      _fs2.default.stat((0, _urlToPath2.default)({ mediaDir: mediaDir, url: url }).filepath, function (err, file) {
        if (err) {
          cb(null, false);
        } else {
          cb(null, file.isFile());
        }
      });
    };

    var mediaToTask = function mediaToTask(prefix, item) {
      return (0, _transform2.default)(item[prefix], function (res, value, key) {
        res[item.id + '_' + prefix + '_' + key] = function (cb) {
          return mediaExists(value.url, cb);
        };
      });
    };

    var stats = {
      length: data.length,
      first: postDate(data[0]),
      last: postDate((0, _last2.default)(data))
    };

    (0, _async.map)(data, function (item, cb) {
      (0, _async.parallel)((0, _assign2.default)(mediaToTask('images', item), mediaToTask('videos', item)), cb);
    }, function (err, results) {
      if (err) return cb(err);

      var hasMedia = (0, _transform2.default)(_assign2.default.apply(undefined, [{}].concat(_toConsumableArray(results))), function (res, exists, key) {
        if (exists) res.media++;
        if (!exists) {
          res.missing++;
          res.missingMedia.push(key);
        }
      }, { media: 0, missing: 0, missingMedia: [] });

      (0, _recursiveReaddir2.default)(mediaDir(), function (err, files) {
        if (err) return cb(err);
        cb(null, (0, _assign2.default)({ fileCount: files.length }, stats, hasMedia));
      });
    });
  });
};

module.exports = exports['default'];